//: [Struct](Struct) |
//: [Class](Class) |
//: Comparison

import UIKit

/*:
 结构体和类的对比 👯‍♂️
 =============
 
 要存储结构化的数据，我们有多种不同的选择：
 
 `1.结构体 2.枚举 3.类 4.闭包`
 
 ![image](swift_types.png)
 
 */
var a = "Hello"
var b = a
b.append(", world")

print(a)
print(b)

var aa = UIView()
var bb = aa
bb.alpha = 0.5
print(aa.alpha)
print(bb.alpha)



//: # 两者对比
//: - 结构体 (和枚举) 是值类型，而类是引用类型
//: - 内存的管理方式有所不同。结构体可以被直接持有及访问，但是类的实例只能通过引用来间接地访问。结构体不会被引用，但是会被复制。也就是说，结构体的持有者是唯一的，但是类却能有很多个持有者
//: - 使用类，我们可以通过继承来共享代码。而结构体 (以及枚举) 是不能被继承的。想要在不同的结构体或者枚举之间共享代码，我们需要使用不同的技术，比如像是组合、泛型以及协议扩展等

//: # 特征
//: - 对一个只含有结构体的数组进行操作的效率，通常要比对一个含有对象的数组进行操作的效率高得多。这是因为结构体通常要更直接：值是直接存储在数组的内存中的。而对象的数组中包含的只是对象的引用。最后，在很多情况下，编译器可以将结构体放到栈上，而不用放在堆里。
//: - 在实现一个 table view 的代理时，我们除了使用类以外别无它选

/*:
 # 优点
 ## 结构体
 - “因为不能改变的东西是可以在线程之间安全地共享的”
 - “只有一个持有者，所以它不可能造成引用循环”
 - “对一个只含有结构体的数组进行操作的效率，通常要比对一个含有对象的数组进行操作的效率高得多。这是因为结构体通常要更直接：值是直接存储在数组的内存中的。而对象的数组中包含的只是对象的引用。最后，在很多情况下，编译器可以将结构体放到栈上，而不用放在堆里”
 
 */










//: [上一页](@previous)
