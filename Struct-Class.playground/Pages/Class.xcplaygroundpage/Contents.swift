//: [Struct](Struct) |
//: Class |
//: [ÂØπÊØî](Comparison) 

import UIKit
/*:
 Class Á±ª üá®üá≥ 
 ==========
 
 1.Á±ªÁöÑÂÆû‰æãÂè™ËÉΩÈÄöËøáÂºïÁî®Êù•Èó¥Êé•Âú∞ËÆøÈóÆ, ÂÆÉËÉΩÊúâÂæàÂ§ö‰∏™ÊåÅÊúâËÄÖ
 
 2.‰ΩøÁî®Á±ªÔºåÊàë‰ª¨ÂèØ‰ª•ÈÄöËøáÁªßÊâøÊù•ÂÖ±‰∫´‰ª£Á†Å
 
 3.NSString,NSArrayÂíåNSDictionaryÁ±ªÂûãÂùá‰ª•Á±ªÁöÑÂΩ¢ÂºèÂÆûÁé∞ÔºåËÄåÂπ∂ÈùûÁªìÊûÑ‰Ωì
 
 */
/*:
 ÂÆû‰æã üíÉ
 ---------
 
 ```
 class SomeClass {
 // code
 }
 ```
 */
class Goods {
    let name: String
    var price: UInt
    
    init(name: String, price: UInt) {
        self.name = name
        self.price = price
    }
}

let phone = Goods(name: "iphone", price: 6000)
phone.name
// ‰∏çÂèØÂèòÂØπË±°ÁöÑÂ±ûÊÄßÂèØÂèò
phone.price += 100
phone.price

//: Êõ¥Â§öÂ±ûÊÄßÊ∑ªÂä†

class iPhone {
    var price: UInt?
    // ÈùôÊÄÅÂèòÈáè
    static var productor = "È∏øÊµ∑ÈõÜÂõ¢"
    // ËÆ°ÁÆóÂ±ûÊÄß
    var secondHandPrice: UInt {
        set{
            self.price = newValue*2
        }
        get{
            return (self.price ?? 0)/2
        }
    }
    
    func getBroken() {
        guard let price = price else {
            return
        }
        self.price = price/10
    }
}
// Âç≥‰Ωølet‰øÆÈ•∞ÔºåÂØπË±°Â±ûÊÄß‰πüÂèØ‰ª•‰øÆÊîπÔºà‰∏çÂêå‰∫éstructÔºâ
let danielsiPhone = iPhone()
danielsiPhone.price
danielsiPhone.price = 6000

let Inc = iPhone.productor

let dannyiPhone = danielsiPhone
dannyiPhone.getBroken()
dannyiPhone.price
danielsiPhone.price

/*:
 ÊÅíÁ≠âËøêÁÆóÁ¨¶
 --------
 - Á≠â‰ª∑‰∫é(===)
 > Ë°®Á§∫‰∏§‰∏™Á±ªÁ±ªÂûã(class type)ÁöÑÂ∏∏ÈáèÊàñËÄÖÂèòÈáèÂºïÁî®Âêå‰∏Ä‰∏™Á±ªÂÆû‰æã
 - ‰∏çÁ≠â‰ª∑‰∫é( !== )
 > Ë°®Á§∫‰∏§‰∏™ÂÆû‰æãÁöÑÂÄº‚ÄúÁõ∏Á≠â‚ÄùÊàñ‚ÄúÁõ∏Âêå‚ÄùÔºåÂà§ÂÆöÊó∂Ë¶ÅÈÅµÁÖßËÆæËÆ°ËÄÖÂÆö‰πâÁöÑËØÑÂà§Ê†áÂáÜÔºåÂõ†Ê≠§Áõ∏ÂØπ‰∫é‚ÄúÁõ∏ Á≠â‚ÄùÊù•ËØ¥ÔºåËøôÊòØ‰∏ÄÁßçÊõ¥Âä†ÂêàÈÄÇÁöÑÂè´Ê≥ï„ÄÇ
 
 */

if dannyiPhone === danielsiPhone {
    print("Âêå‰∏Ä‰∏™ÂØπË±°ÂºïÁî®")
}

/*:
 ÂÜÖÂ≠òÁÆ°ÁêÜ üëª
 =========
 - weak ÂºïÁî®
 - unowned ÂºïÁî®
 - Âæ™ÁéØÂºïÁî®
 - ÊçïËé∑ÂàóË°®
 */

// ‰∏∫‰ªÄ‰πàstructÂèØ‰ª•ËÄåclass‰∏çËÉΩËøôÊ†∑
struct Human {
    let name: String
    var children: [Human]
}
var john = Human(name: "John", children: [])
john.children = [john]



//: ÂºïÁî®Âæ™ÁéØ

class View1 {
    var window: Window1
    init(window: Window1) {
        self.window = window
    }
    deinit {
        print("view1ÈáäÊîæ")
    }
}
class Window1 {
    var rootView: View1?
    deinit {
        print("Window1ÈáäÊîæ")
    }
}

var window1: Window1? = Window1()
var view1: View1? = View1(window: window1!)
window1?.rootView = view1
view1 = nil
window1 = nil

//: weak

class View2 {
    var window: Window2
    init(window: Window2) {
        self.window = window
    }
    deinit {
        print("View2ÈáäÊîæ")
    }
}
class Window2 {
    weak var rootView: View2?
    deinit {
        print("Window2ÈáäÊîæ")
    }
}

var window2: Window2? = Window2()
var view2: View2? = View2(window: window2!)
window2?.rootView = view2
view2 = nil
window2 = nil

//: unowned
//: > Âõ†‰∏∫ weak ÂºïÁî®ÁöÑÂèòÈáèÂèØ‰ª•Âèò‰∏∫ nilÔºåÊâÄ‰ª•ÂÆÉ‰ª¨ÂøÖÈ°ªÊòØÂèØÈÄâÂÄºÁ±ªÂûãÔºå‰ΩÜÊòØÊúâ‰∫õÊó∂ÂÄôËøôÂπ∂‰∏çÊòØ‰Ω†ÊÉ≥Ë¶ÅÁöÑ.

class View3 {
    unowned var window: Window3
    init(window: Window3) {
        self.window = window
    }
    deinit {
        print("View3ÈáäÊîæ")
    }
}
class Window3 {
    var rootView: View3?
    deinit {
        print("Window3ÈáäÊîæ")
    }
}
// ‰øùËØÅ window ÁöÑÁîüÂëΩÂë®ÊúüÊØî view Èïø
// ÊØè‰∏™ unowned ÁöÑÂºïÁî®ÔºåSwift ËøêË°åÊó∂Â∞Ü‰∏∫Ëøô‰∏™ÂØπË±°Áª¥Êä§Âè¶Â§ñ‰∏Ä‰∏™ÂºïÁî®ËÆ°Êï∞„ÄÇÂΩìÊâÄÊúâÁöÑ strong ÂºïÁî®Ê∂àÂ§±Êó∂ÔºåÂØπË±°Â∞ÜÊääÂÆÉÁöÑËµÑÊ∫ê (ÊØîÂ¶ÇÂØπÂÖ∂‰ªñÂØπË±°ÁöÑÂºïÁî®) ÈáäÊîæÊéâ„ÄÇ‰∏çËøáÔºåËøô‰∏™ÂØπË±°Êú¨Ë∫´ÁöÑÂÜÖÂ≠òÂ∞ÜÁªßÁª≠Â≠òÂú®ÔºåÁõ¥Âà∞ÊâÄÊúâÁöÑ unowned ÂºïÁî®‰πüÈÉΩÊ∂àÂ§±
var window3: Window3? = Window3()
var view3: View3? = View3(window: window3!)
window3?.rootView = view3
view3 = nil
window3 = nil


//: ÊçïËé∑ÂàóË°®

class View {
    var window: Window
    init(window: Window) {
        self.window = window
    }
    deinit {
        print("Deinit View")
    }
}
class Window {
    weak var rootView: View?
    deinit {
        print("Deinit Window")
    }
    var onRotate: (() -> ())?
}

var window: Window? = Window()
var view: View? = View(window: window!)
window?.rootView = view!

// ‚ùå
window?.onRotate = {
    print("We now also need to update the view: \(String(describing: view))")
}
// ‚úÖ
window?.onRotate = { [weak view, weak myWindow=window] in
    print("We now also need to update the view: \(String(describing: view))")
    print("Because the window \(String(describing: myWindow)) changed")
}

//: [‰∏ä‰∏ÄÈ°µ](@previous) |
//: [‰∏ã‰∏ÄÈ°µ](@next)

